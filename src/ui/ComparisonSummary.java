/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import data.DataLoader;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import model.Currency;
import model.CurrencyConversionService;
import model.ExchangeRate;

/**
 * Summary page for currency comparison
 */
public class ComparisonSummary extends BasePage {

    /**
     * Creates new form ComparisonSummary
     */
    public ComparisonSummary(double sourceAmount, Currency sourceCurrency, Currency targetCurrency) {
        initComponents();
        this.pageTitle.setText("Comparison Summary");
        setData(sourceAmount, sourceCurrency, targetCurrency);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        comparisonResults = new javax.swing.JTable();
        recommendationLabel = new javax.swing.JLabel();
        conversionSummaryLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(super.getTitle());

        comparisonResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bank Name", "Exchange Rate", "Transaction Fees", "Net Proceeds"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(comparisonResults);

        recommendationLabel.setFont(new java.awt.Font("Bangla MN", 1, 14)); // NOI18N
        recommendationLabel.setForeground(new java.awt.Color(0, 153, 0));

        conversionSummaryLabel.setFont(new java.awt.Font("Bangla MN", 1, 10)); // NOI18N
        conversionSummaryLabel.setForeground(new java.awt.Color(0, 0, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(recommendationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                    .addComponent(conversionSummaryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addComponent(conversionSummaryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(recommendationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable comparisonResults;
    private javax.swing.JLabel conversionSummaryLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel recommendationLabel;
    // End of variables declaration//GEN-END:variables

    private void setData(double sourceAmount, Currency sourceCurrency, Currency targetCurrency) {
        ArrayList<CurrencyConversionService> services = DataLoader.getConversionServices();
        CurrencyConversionService bestService = null;
        double maxValue = 0;
        for (CurrencyConversionService service : services) {
            // For a given bank do the following:

            // Get the converted amount
            double convertedAmount = service.convertCurrency(sourceAmount, sourceCurrency, targetCurrency);
            // Get the exchange rate
            ExchangeRate er = service.getCurrentExchangeRate(sourceCurrency, targetCurrency);
            // Add a row for this bank in the table
            DefaultTableModel model = (DefaultTableModel) comparisonResults.getModel();
            model.addRow(new Object[]{
                service.getServiceName(),
                String.format("%.5f", er.getConversionRate()),
                String.format("%.2f", er.getFees()),
                String.format("%.2f", convertedAmount)
            });
            if (bestService == null || convertedAmount > maxValue) {
                bestService = service;
                maxValue = convertedAmount;
            }
        }
        conversionSummaryLabel.setText(String.format("%.2f %s to %s", sourceAmount, sourceCurrency, targetCurrency));
        recommendationLabel.setText(String.format("%s provides you the best value", bestService.getServiceName()));
    }
}
